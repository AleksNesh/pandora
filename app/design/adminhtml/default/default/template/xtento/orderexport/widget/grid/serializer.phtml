<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * @var Mage_Adminhtml_Block_Widget_Grid_Serializer
 */
?>
<?php $_id = 'id_' . md5(microtime()) ?>
<?php $formId = $this->getFormId() ?>
<?php if (!empty($formId)) : ?>
<script type="text/javascript">
    Event.observe(window, "load", function () {
        var serializeInput = document.createElement('input');
        serializeInput.type = 'hidden';
        serializeInput.name = '<?php echo $this->getInputElementName()?>';
        serializeInput.id = '<?php echo $_id?>';
        try {
            document.getElementById('<?php echo $formId?>').appendChild(serializeInput);
            new serializerController('<?php echo $_id?>', <?php echo $this->getDataAsJSON() ?>, <?php echo $this->getColumnInputNames(true) ?>, <?php echo $this->getGridBlock()->getJsObjectName() ?>, '<?php echo $this->getReloadParamName()?>');
        } catch (e) {
            //Error add serializer
        }
    });
</script>
<?php else : ?>
<input type="hidden" name="<?php echo $this->getInputElementName()?>" value="" id="<?php echo $_id?>"/>
<?php if (!Mage::helper('xtcore/utils')->mageVersionCompare(Mage::getVersion(), '1.4.0.0', '>=')) { ?>
    <script type="text/javascript">
        var serializerController = Class.create();
        serializerController.prototype = {
            oldCallbacks:{},
            initialize:function (hiddenDataHolder, predefinedData, inputsToManage, grid, reloadParamName) {
                //Grid inputs
                this.tabIndex = 1000;
                this.inputsToManage = inputsToManage;
                this.multidimensionalMode = inputsToManage.length > 0;

                //Hash with grid data
                this.gridData = this.getGridDataHash(predefinedData);

                //Hidden input data holder
                this.hiddenDataHolder = $(hiddenDataHolder);
                this.hiddenDataHolder.value = this.serializeObject();

                this.grid = grid;

                // Set old callbacks
                this.setOldCallback('row_click', this.grid.rowClickCallback);
                this.setOldCallback('init_row', this.grid.initRowCallback);
                this.setOldCallback('checkbox_check', this.grid.checkboxCheckCallback);

                //Grid
                this.reloadParamName = reloadParamName;
                this.grid.reloadParams = {};
                this.grid.reloadParams[this.reloadParamName + '[]'] = this.getDataForReloadParam();
                this.grid.rowClickCallback = this.rowClick.bind(this);
                this.grid.initRowCallback = this.rowInit.bind(this);
                this.grid.checkboxCheckCallback = this.registerData.bind(this);
                this.grid.rows.each(this.eachRow.bind(this));
            },
            setOldCallback:function (callbackName, callback) {
                this.oldCallbacks[callbackName] = callback;
            },
            getOldCallback:function (callbackName) {
                return this.oldCallbacks[callbackName] ? this.oldCallbacks[callbackName] : Prototype.emptyFunction;
            },
            registerData:function (grid, element, checked) {
                if (this.multidimensionalMode) {
                    if (checked) {
                        if (element.inputElements) {
                            this.gridData.set(element.value, {});
                            for (var i = 0; i < element.inputElements.length; i++) {
                                element.inputElements[i].disabled = false;
                                this.gridData.get(element.value)[element.inputElements[i].name] = element.inputElements[i].value;
                            }
                        }
                    }
                    else {
                        if (element.inputElements) {
                            for (var i = 0; i < element.inputElements.length; i++) {
                                element.inputElements[i].disabled = true;
                            }
                        }
                        this.gridData.unset(element.value);
                    }
                }
                else {
                    if (checked) {
                        this.gridData.set(element.value, element.value);
                    }
                    else {
                        this.gridData.unset(element.value);
                    }
                }

                this.hiddenDataHolder.value = this.serializeObject();
                this.grid.reloadParams = {};
                this.grid.reloadParams[this.reloadParamName + '[]'] = this.getDataForReloadParam();
                this.getOldCallback('checkbox_check')(grid, element, checked);
            },
            eachRow:function (row) {
                this.rowInit(this.grid, row);
            },
            rowClick:function (grid, event) {
                var trElement = Event.findElement(event, 'tr');
                var isInput = Event.element(event).tagName == 'INPUT';
                if (trElement) {
                    var checkbox = Element.select(trElement, 'input');
                    if (checkbox[0]) {
                        var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                        this.grid.setCheckboxChecked(checkbox[0], checked);
                    }
                }
                this.getOldCallback('row_click')(grid, event);
            },
            inputChange:function (event) {
                var element = Event.element(event);
                if (element && element.checkboxElement && element.checkboxElement.checked) {
                    this.gridData.get(element.checkboxElement.value)[element.name] = element.value;
                    this.hiddenDataHolder.value = this.serializeObject();
                }
            },
            rowInit:function (grid, row) {
                if (this.multidimensionalMode) {
                    var checkbox = $(row).select('.checkbox')[0];
                    var selectors = this.inputsToManage.map(function (name) {
                        return ['input[name="' + name + '"]', 'select[name="' + name + '"]'];
                    });
                    var inputs = $(row).select.apply($(row), selectors.flatten());
                    if (checkbox && inputs.length > 0) {
                        checkbox.inputElements = inputs;
                        for (var i = 0; i < inputs.length; i++) {
                            inputs[i].checkboxElement = checkbox;
                            if (this.gridData.get(checkbox.value) && this.gridData.get(checkbox.value)[inputs[i].name]) {
                                inputs[i].value = this.gridData.get(checkbox.value)[inputs[i].name];
                            }
                            inputs[i].disabled = !checkbox.checked;
                            inputs[i].tabIndex = this.tabIndex++;
                            Event.observe(inputs[i], 'keyup', this.inputChange.bind(this));
                            Event.observe(inputs[i], 'change', this.inputChange.bind(this));
                        }
                    }
                }
                this.getOldCallback('init_row')(grid, row);
            },

            //Stuff methods
            getGridDataHash:function (_object) {
                return $H(this.multidimensionalMode ? _object : this.convertArrayToObject(_object))
            },
            getDataForReloadParam:function () {
                return this.multidimensionalMode ? this.gridData.keys() : this.gridData.values();
            },
            serializeObject:function () {
                if (this.multidimensionalMode) {
                    var clone = this.gridData.clone();
                    clone.each(function (pair) {
                        clone.set(pair.key, encode_base64(Object.toQueryString(pair.value)));
                    });
                    return clone.toQueryString();
                }
                else {
                    return this.gridData.values().join('&');
                }
            },
            convertArrayToObject:function (_array) {
                var _object = {};
                for (var i = 0, l = _array.length; i < l; i++) {
                    _object[_array[i]] = _array[i];
                }
                return _object;
            }
        };
        if ($('profile_tabs_destination')) {
            $('profile_tabs_destination').removeClassName('notloaded');
            $('profile_tabs_destination').click();
        }
    </script>
    <?php } ?>
<script type="text/javascript">
    new serializerController('<?php echo $_id?>', <?php echo $this->getDataAsJSON() ?>, <?php echo $this->getColumnInputNames(true) ?>, <?php echo $this->getGridBlock()->getJsObjectName() ?>, '<?php echo $this->getReloadParamName()?>');
</script>
<?php endif; ?>
